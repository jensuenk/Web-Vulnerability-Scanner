import { Component, OnInit } from '@angular/core';
import { Observable } from 'rxjs';
import { ApiService } from '../api.service';
import { ScanInputService } from '../scan-input.service';
@Component({
  selector: 'app-whois',
  templateUrl: './whois.component.html',
  styleUrls: ['./whois.component.css']
})
export class WhoisComponent implements OnInit {

  whoisObservable: Observable<any>;
	whoisData: WhoisRecord;

  constructor(private whoisApi:ApiService, private url:ScanInputService) { }

  ngOnInit(): void {
      this.getWhoisData()
  }

  getWhoisData(){
    this.whoisObservable = this.whoisApi.getWhois(this.url.url);
		this.whoisObservable.subscribe((result) => {
      this.whoisData = result.WhoisRecord;
      console.log(result.WhoisRecord)
		});
  }

}

export interface WhoisRecord {
  createdDate: Date;
  updatedDate: Date;
  expiresDate: Date;
  registrant: Registrant;
  administrativeContact: AdministrativeContact;
  technicalContact: TechnicalContact;
  domainName: string;
  nameServers: NameServers;
  status: string;
  rawText: string;
  parseCode: number;
  header: string;
  strippedText: string;
  footer: string;
  audit: Audit;
  customField1Name: string;
  customField1Value: string;
  registrarName: string;
  registrarIANAID: string;
  whoisServer: string;
  createdDateNormalized: string;
  updatedDateNormalized: string;
  expiresDateNormalized: string;
  customField2Name: string;
  customField3Name: string;
  customField2Value: string;
  customField3Value: string;
  registryData: RegistryData;
  contactEmail: string;
  domainNameExt: string;
  estimatedDomainAge: number;
}

export interface RootObject {
  WhoisRecord: WhoisRecord;
}
export interface Registrant {
  organization: string;
  state: string;
  country: string;
  countryCode: string;
  rawText: string;
}

export interface AdministrativeContact {
  organization: string;
  state: string;
  country: string;
  countryCode: string;
  rawText: string;
}

export interface TechnicalContact {
  organization: string;
  state: string;
  country: string;
  countryCode: string;
  rawText: string;
}

export interface NameServers {
  rawText: string;
  hostNames: string[];
  ips: any[];
}

export interface Audit {
  createdDate: string;
  updatedDate: string;
}

export interface NameServers2 {
  rawText: string;
  hostNames: string[];
  ips: any[];
}

export interface Audit2 {
  createdDate: string;
  updatedDate: string;
}

export interface RegistryData {
  createdDate: Date;
  updatedDate: Date;
  expiresDate: Date;
  domainName: string;
  nameServers: NameServers2;
  status: string;
  rawText: string;
  parseCode: number;
  header: string;
  strippedText: string;
  footer: string;
  audit: Audit2;
  customField1Name: string;
  customField1Value: string;
  registrarName: string;
  registrarIANAID: string;
  createdDateNormalized: string;
  updatedDateNormalized: string;
  expiresDateNormalized: string;
  customField2Name: string;
  customField3Name: string;
  customField2Value: string;
  customField3Value: string;
  whoisServer: string;
}