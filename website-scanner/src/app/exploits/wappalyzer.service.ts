import { Injectable } from '@angular/core';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { Observable } from 'rxjs';
import { Message } from 'primeng/api';

@Injectable({
  providedIn: 'root'
})
export class WappalyzerService {

  // 2HvmOz0tE27jR3BLSfM1eYfuPDkPOFQ4tb89yN6h
  key: string = '';
  technologies: Technology[];
  technologyScans: TechnologyScan[] = [];

  constructor(private http: HttpClient) {
  }

  getResponse(url: string): Observable<any> {
    const headers = new HttpHeaders()
      .set('x-api-key', this.key)
      .set('Content-Type', 'application/json');

    return this.http.get<any>("https://api.wappalyzer.com/lookup/v2/?urls=" + url, { headers: headers });
  }

  getVurnabilities() {
    this.technologies.forEach(vurnability => {

      let scan: TechnologyScan = {
        name: vurnability.name,
        versions: vurnability.versions,
        categories: vurnability.categories
      };
      if (vurnability.versions == null || vurnability.versions.length <= 0) {
        scan.versions = null;
        scan.message1 = [
          { severity: 'info', summary: 'Info', detail: "Could not detect the version of " + vurnability.name + "." },
        ];
      }
      else {
        if (this.isVurnable(vurnability)) {
          scan.message2 = [
            { severity: 'warn', summary: 'Warning', detail: "Found an exploit or vurnability with the current version (" + vurnability.versions + ") of " + vurnability.name + ".", closable: false  },
          ];
        }
        else {
          scan.message2 = [
            { severity: 'success', summary: 'Success', detail: "Did not found vurnabilities with version " + vurnability.versions + " of " + vurnability.name + ".", closable: false  },
          ];
        }
      }

      this.technologyScans.push(scan);
    });
    console.log(this.technologyScans)
  }

  isVurnable(technology: Technology) {
    return true;
  }
}

export interface Category {
  id: number;
  slug: string;
  name: string;
}

export interface Technology {
  slug: string;
  name: string;
  confidence: number;
  versions?: string[];
  icon: string;
  website: string;
  cpe: string;
  categories: Category[];
}

export interface RootObject {
  urls: any;
  technologies: Technology[];
}

export interface RootObject {
  urls: any;
  technologies: Technology[];
}

export interface TechnologyScan {
  name: string;
  versions?: string[];
  categories: Category[];
  message1?: Message[];
  message2?: Message[];
}